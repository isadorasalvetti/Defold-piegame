go.property("maxHp", 100)

-- matching between animation and idle animation
anim2idle = {Back="IddleB",
			Left="IddleL",
			Right="IddleR",
			Forward="IddleF"}

function init(self)
	msg.post(".", "acquire_input_focus")

	self.moving = false
	-- second to wait before going to idle animation
	self.idle_delay = 0.2
	-- seconds elapsed not moving (triggers idle anim when >= idle_delay)
	self.idle_delay_current = 0
	
	self.cooldown = 1
	self.cdtime = 0
	
	self.input = vmath.vector3()
	self.dir = vmath.vector3(0, 0, 0)

	self.speed = 50

	self.hp = self.maxHp
end

function final(self)
	msg.post(".", "release_input_focus")
end

function play_idle_animation(self)
	-- move to idle animation
	if anim2idle[self.anim] ~= nil then
		play_once(self, anim2idle[self.anim])
	end
end

function update(self, dt)		
	if self.moving then
		--Position
		local pos = go.get_position()
		pos = pos + self.dir * self.speed * dt
		go.set_position(pos)
		
		--Animation
		self.idle_delay_current = 0
		if self.dir.x ~= 0 then
			if self.dir.x > 0 then 
				updateAnimation(self, "Right")
			else
				updateAnimation(self, "Left")
			end	
		else
			if self.dir.y > 0 then 
				updateAnimation(self, "Back")
			else
				updateAnimation(self, "Forward")
			end
		end
	else --NOT MOVING:
		-- idle animation
		self.idle_delay_current = self.idle_delay_current + dt
		if self.idle_delay_current >= self.idle_delay then
			play_idle_animation(self)
		end

		--shooting
		self.cdtime = self.cdtime + dt
		if self.cdtime > self.cooldown and self.target ~= nil then
			self.cdtime = 0
			shoot(self)
		end
	end

	self.moving = false
	self.dir = vmath.vector3(0,0,0)
end

function play_once(self, anim)
	-- ensure changing animation is it's different
	if self.anim ~= anim then
		msg.post("#sprite", "play_animation", {id = hash(anim)})
		self.anim = anim
	end
end


function on_input(self, action_id, action)	
	if action_id == hash("up") then
		self.dir = self.dir + vmath.vector3(0, 1, 0)
	elseif action_id == hash("down") then
		self.dir =  self.dir + vmath.vector3(0, -1, 0)
	elseif action_id == hash("left") then
		self.dir =  self.dir + vmath.vector3(-1, 0, 0)
	elseif action_id == hash("right") then
		self.dir = self.dir + vmath.vector3(1, 0, 0)
	elseif action_id == hash("fire") then
		msg.post("Enemies#enemyHolder", "getClosestEnemy")
	end

	self.moving = vmath.length(self.dir) > 0
end

function on_message(self, message_id, message, sender)
	if message_id == hash("setTarget") then
		self.target = message.target
		print("[player] new target ", self.target)
	end
	--Damage
	if message_id == hash("collision_response") then
		if message["group"] == hash("enemy") then
			local path = msg.url(nil, message["other_id"], "enemy")
			local dmg = go.get(path, "collisionDmg")
			takeDamage(self, dmg)
		end	
	end
end

function updateAnimation(self, animation)
	if self.anim ~= animation then
		play_once(self, animation)
	end
	self.anim = animation
end

function shoot(self)
	if self.target ~= nil then
		print("[player] shooting at ", self.target)
		enemyPos = go.get_position(self.target)
		myPos = go.get_position()
		dir = vmath.normalize(enemyPos - myPos)
				
		local angle = math.atan2(dir.y, dir.x)
		local rot = vmath.quat_rotation_z(angle)
		local props = {dir = dir}
		
		factory.create("#rocketfactory", nil, rot, props)
	else
		print("[player] no target")
	end
end

function takeDamage(self, dmg)
	self.hp = math.max(self.hp - dmg, 0)
	pcnt = self.hp / self.maxHp	
	msg.post("HPFill#healthFill", "updateHealth", {percent = pcnt})
	if self.hp <= 0 then
		--die
	end
end